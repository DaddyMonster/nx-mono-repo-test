name: NX Affected Release
on:
  push:
    branches:
      - master
      - main

env:
  BEFORE_SHA: ${{ github.event.before }}
  GC_PROJECT_ID: ${{ secrets.GC_PROJECT_ID }}
  GC_REGION: ${{ secrets.GC_REGION }}
  GC_SERVICE_ACCOUNT: ${{ secrets.GC_SERVICE_ACCOUNT }}
  GC_SERVICE_ACCOUNT_EMAIL: ${{ secrets.GC_SERVICE_ACCOUNT_EMAIL }}
  NEST_SECRETS: ${{ secrets.TEST_NEST_SECRETS }}
  # gcr.io 리포 이름

jobs:
  check_if_package_modified:
    name: Detact Package.json modification and rebuild base docker img
    runs-on: ubuntu-latest
    outputs:
      modified: ${{ steps.check.outputs.changed }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: check if the package.json file has changed!
        id: check
        uses: EndBug/version-check@v1
        with:
          diff-search: true
      - name: Log when changed
        if: steps.check.outputs.changed == 'true'
        run: 'echo "Version change found in commit ${{ steps.check.outputs.commit }}!"'

  deploy_base_img:
    name: Build and deloy base docker img with all dependencies pre-installed
    runs-on: ubuntu-latest
    needs: check_if_package_modified
    outputs:
      access_tokken: ${{ steps.access_tokken.access_tokken }}
    steps:
      - name: display pwd
        run: echo $PWD
      - name: Package Modification logger
        run: echo ${{ needs.check_if_package_modified.outputs.modified }}

      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name : GC_LOGIN
        uses: google-github-actions/setup-gcloud@v0.2.0
        with:
          project_id: ${{ secrets.GC_PROJECT_ID }}
          service_account_key: ${{ secrets.GC_SERVICE_ACCOUNT }}
          service_account_email: ${{ secrets.GC_SERVICE_ACCOUNT_EMAIL }}


        # CREATE ACCESS TOKKEN FOR NEXT STEP
      - name: CREATE GC REGISTRY ACCESS TOKKEN
        id: access_tokken
        run: |-
          tokken=$(gcloud auth print-access-token)
          ::set-output name=access_tokken::$tokken
          
      
      - name: Enable the necessary APIs and enable docker auth
        shell: bash
        if: needs.check_if_package_modified.outputs.modified == 'true'
        run: |-
          gcloud services enable containerregistry.googleapis.com
          gcloud services enable run.googleapis.com
          gcloud --quiet auth configure-docker
          chmod +x ./ci/base-img.sh
          ./ci/bash-img.sh

  #    - name: Build and deploy Base-Docker-Img at root directory only when package.json has changed!
   #     if: needs.check_if_package_modified.outputs.modified == 'true'
    #    shell: bash
     #   run: chmod +x ./ci/base-img.sh
        
      - name: roll up
        if: needs.check_if_package_modified.outputs.modified == 'true'
        run: ./ci/base-img.sh


  affected_build:
    name: build only affected apps
    needs: deploy_base_img
    runs-on: ubuntu-latest
    container: 
      image: gcr.io/nx-test-307509/nx-base-img:latest
      credentials:
        username: oauth2accesstoken
        password: ${{ needs.deploy_base_img.outputs.access_tokken }}
    steps:
      # Nx git diff 사용으로 affted 사용을 위한 git history fetching
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      # GC_AUTH
      - name: GC_AUTH
        uses: google-github-actions/setup-gcloud@v0.2.0
        with:
          project_id: ${{ secrets.GC_PROJECT_ID }}
          service_account_key: ${{ secrets.GC_SERVICE_ACCOUNT }}
          service_account_email: ${{ secrets.GC_SERVICE_ACCOUNT_EMAIL }}
      - name: Enable the necessary APIs and enable docker auth
        shell: bash
        run: |-
          gcloud services enable containerregistry.googleapis.com
          gcloud services enable run.googleapis.com
          gcloud --quiet auth configure-docker

      - name: Use Node.js 12.x
        uses: actions/setup-node@v1
        with:
          node-version: 12.x
      - run: git fetch origin master
      # Nx 사용을 위한 디펜던시 설치
      - name: Install Dependency
        run: npm install

     

      # 도커 사용 설정

      # Affected build
      - name: Run Affected Build and Deploy
        shell: bash
        run: npm run affected:prod-build -- --base=$BEFORE_SHA
